!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
EI_APPLICATION_H	ei_application.h	13;"	d
EI_DRAW_H	ei_draw.h	13;"	d
EI_EVENT_H	ei_event.h	11;"	d
EI_FALSE	ei_types.h	/^	EI_FALSE = 0,$/;"	e	enum:__anon7
EI_GEOMETRYMANAGER_H	ei_geometrymanager.h	12;"	d
EI_MAIN_H	ei_main.h	12;"	d
EI_TRUE	ei_types.h	/^	EI_TRUE = 1$/;"	e	enum:__anon7
EI_TYPES_H	ei_types.h	12;"	d
EI_UTILS_H	ei_utils.h	9;"	d
EI_WIDGETCLASS_H	ei_widgetclass.h	12;"	d
EI_WIDGET_H	ei_widget.h	11;"	d
HW_INTERFACE_H	hw_interface.h	12;"	d
allocfunc	ei_widgetclass.h	/^	ei_widgetclass_allocfunc_t		allocfunc;		\/\/\/< The function that allocated instances of this class of widget.$/;"	m	struct:ei_widgetclass_t
alpha	ei_types.h	/^	unsigned char			alpha;	\/\/\/< The transparency of the color. 0 is invisible, 255 is totally opaque.$/;"	m	struct:__anon11
application	ei_event.c	/^                ei_app_event_t		application;	\/\/\/< Event parameters for application-related events (see \\ref ei_app_event_t).$/;"	m	union:ei_event_t::__anon6	file:
application	ei_event.h	/^		ei_app_event_t		application;	\/\/\/< Event parameters for application-related events (see \\ref ei_app_event_t).$/;"	m	union:ei_event_t::__anon6
blue	ei_types.h	/^	unsigned char			blue;	\/\/\/< The blue component of the color.$/;"	m	struct:__anon11
button_number	ei_event.c	/^        int				button_number;	\/\/\/< The number of the button that was pressed or released. Only valid for \\ref ei_ev_mouse_buttondown or \\ref ei_ev_mouse_buttonup event types.$/;"	m	struct:__anon4	file:
button_number	ei_event.h	/^	int				button_number;	\/\/\/< The number of the button that was pressed or released. Only valid for \\ref ei_ev_mouse_buttondown or \\ref ei_ev_mouse_buttonup event types.$/;"	m	struct:__anon4
children_head	ei_widget.h	/^	struct ei_widget_t*	children_head;	\/\/\/< Pointer to the first child of this widget.	Children are chained with the "next_sibling" field.$/;"	m	struct:ei_widget_t	typeref:struct:ei_widget_t::ei_widget_t
children_tail	ei_widget.h	/^	struct ei_widget_t*	children_tail;	\/\/\/< Pointer to the last child of this widget.$/;"	m	struct:ei_widget_t	typeref:struct:ei_widget_t::ei_widget_t
content_rect	ei_widget.h	/^	ei_rect_t*		content_rect;	\/\/\/< Where to place children, when this widget is used as a container. By defaults, points to the screen_location.$/;"	m	struct:ei_widget_t
drawfunc	ei_widgetclass.h	/^	ei_widgetclass_drawfunc_t		drawfunc;		\/\/\/< The function that draws on screen an instance of this class of widget.$/;"	m	struct:ei_widgetclass_t
ei_anc_center	ei_types.h	/^	ei_anc_center,			\/\/\/< Anchor in the center.$/;"	e	enum:__anon12
ei_anc_east	ei_types.h	/^	ei_anc_east,			\/\/\/< Anchor on the right side, centered vertically.$/;"	e	enum:__anon12
ei_anc_none	ei_types.h	/^	ei_anc_none		= 0,	\/\/\/< No anchor defined.$/;"	e	enum:__anon12
ei_anc_north	ei_types.h	/^	ei_anc_north,			\/\/\/< Anchor on the top side, centered horizontally.$/;"	e	enum:__anon12
ei_anc_northeast	ei_types.h	/^	ei_anc_northeast,		\/\/\/< Anchor on the top-right corner.$/;"	e	enum:__anon12
ei_anc_northwest	ei_types.h	/^	ei_anc_northwest		\/\/\/< Anchor on the top-left corner.$/;"	e	enum:__anon12
ei_anc_south	ei_types.h	/^	ei_anc_south,			\/\/\/< Anchor on the bottom side, centered horizontally.$/;"	e	enum:__anon12
ei_anc_southeast	ei_types.h	/^	ei_anc_southeast,		\/\/\/< Anchor on the bottom-right corner.$/;"	e	enum:__anon12
ei_anc_southwest	ei_types.h	/^	ei_anc_southwest,		\/\/\/< Anchor on the bottom-left corner.$/;"	e	enum:__anon12
ei_anc_west	ei_types.h	/^	ei_anc_west,			\/\/\/< Anchor on the left side, centered vertically.$/;"	e	enum:__anon12
ei_anchor_t	ei_types.h	/^} ei_anchor_t;$/;"	t	typeref:enum:__anon12
ei_app_event_t	ei_event.c	/^} ei_app_event_t;$/;"	t	typeref:struct:__anon5	file:
ei_app_event_t	ei_event.h	/^} ei_app_event_t;$/;"	t	typeref:struct:__anon5
ei_axis_both	ei_types.h	/^	ei_axis_both			\/\/\/< Both horizontal and vertical axis.$/;"	e	enum:__anon14
ei_axis_none	ei_types.h	/^	ei_axis_none		= 0,	\/\/\/< No axis.$/;"	e	enum:__anon14
ei_axis_set_t	ei_types.h	/^} ei_axis_set_t;$/;"	t	typeref:enum:__anon14
ei_axis_x	ei_types.h	/^	ei_axis_x,			\/\/\/< Horizontal axis.$/;"	e	enum:__anon14
ei_axis_y	ei_types.h	/^	ei_axis_y,			\/\/\/< Vertical axis.$/;"	e	enum:__anon14
ei_bind	ei_event.c	/^void		ei_bind			(ei_eventtype_t		eventtype,$/;"	f
ei_bool_t	ei_types.h	/^} ei_bool_t;$/;"	t	typeref:enum:__anon7
ei_button_configure	ei_widget.c	/^void			ei_button_configure		(ei_widget_t*		widget,$/;"	f
ei_callback_t	ei_widget.h	/^typedef ei_bool_t	(*ei_callback_t)	(ei_widget_t*		widget,$/;"	t
ei_color_t	ei_types.h	/^} ei_color_t;$/;"	t	typeref:struct:__anon11
ei_default_background_color	ei_types.h	/^static const ei_color_t	ei_default_background_color	= { 0xA0, 0xA0, 0xA0, 0xff };$/;"	v
ei_default_font_filename	ei_types.h	/^static const char	ei_default_font_filename[]	= "misc\/font.ttf";$/;"	v
ei_ev_app	ei_event.c	/^        ei_ev_app,			\/\/\/< An application event, created by \\ref hw_event_post_app.$/;"	e	enum:__anon1	file:
ei_ev_app	ei_event.h	/^	ei_ev_app,			\/\/\/< An application event, created by \\ref hw_event_post_app.$/;"	e	enum:__anon1
ei_ev_keydown	ei_event.c	/^        ei_ev_keydown,			\/\/\/< A keyboard key has been pressed.$/;"	e	enum:__anon1	file:
ei_ev_keydown	ei_event.h	/^	ei_ev_keydown,			\/\/\/< A keyboard key has been pressed.$/;"	e	enum:__anon1
ei_ev_keyup	ei_event.c	/^        ei_ev_keyup,			\/\/\/< A keyboard key has been released.$/;"	e	enum:__anon1	file:
ei_ev_keyup	ei_event.h	/^	ei_ev_keyup,			\/\/\/< A keyboard key has been released.$/;"	e	enum:__anon1
ei_ev_last	ei_event.c	/^        ei_ev_last			\/\/\/< Last event type, its value is the number of event types.$/;"	e	enum:__anon1	file:
ei_ev_last	ei_event.h	/^	ei_ev_last			\/\/\/< Last event type, its value is the number of event types.$/;"	e	enum:__anon1
ei_ev_mouse_buttondown	ei_event.c	/^        ei_ev_mouse_buttondown,		\/\/\/< A mouse button has been pressed.$/;"	e	enum:__anon1	file:
ei_ev_mouse_buttondown	ei_event.h	/^	ei_ev_mouse_buttondown,		\/\/\/< A mouse button has been pressed.$/;"	e	enum:__anon1
ei_ev_mouse_buttonup	ei_event.c	/^        ei_ev_mouse_buttonup,		\/\/\/< A mouse button has been released.$/;"	e	enum:__anon1	file:
ei_ev_mouse_buttonup	ei_event.h	/^	ei_ev_mouse_buttonup,		\/\/\/< A mouse button has been released.$/;"	e	enum:__anon1
ei_ev_mouse_move	ei_event.c	/^        ei_ev_mouse_move,		\/\/\/< The mouse has moved.$/;"	e	enum:__anon1	file:
ei_ev_mouse_move	ei_event.h	/^	ei_ev_mouse_move,		\/\/\/< The mouse has moved.$/;"	e	enum:__anon1
ei_ev_none	ei_event.c	/^        ei_ev_none		= 0,	\/\/\/< No event, used on an un-initialized structure.$/;"	e	enum:__anon1	file:
ei_ev_none	ei_event.h	/^	ei_ev_none		= 0,	\/\/\/< No event, used on an un-initialized structure.$/;"	e	enum:__anon1
ei_event_t	ei_event.c	/^typedef struct ei_event_t {$/;"	s	file:
ei_event_t	ei_event.c	/^} ei_event_t;$/;"	t	typeref:struct:ei_event_t	file:
ei_event_t	ei_event.h	/^typedef struct ei_event_t {$/;"	s
ei_event_t	ei_event.h	/^} ei_event_t;$/;"	t	typeref:struct:ei_event_t
ei_eventtype_t	ei_event.c	/^} ei_eventtype_t;$/;"	t	typeref:enum:__anon1	file:
ei_eventtype_t	ei_event.h	/^} ei_eventtype_t;$/;"	t	typeref:enum:__anon1
ei_font_default_color	ei_types.h	/^static const ei_color_t	ei_font_default_color		= { 0x00, 0x00, 0x00, 0xff };$/;"	v
ei_font_default_size	ei_types.h	/^static const int	ei_font_default_size		= 22;	\/\/\/< Default font color$/;"	v
ei_font_t	ei_types.h	/^typedef void*		ei_font_t;$/;"	t
ei_fontstyle_t	ei_types.h	/^} ei_fontstyle_t;$/;"	t	typeref:enum:__anon15
ei_frame_configure	ei_widget.c	/^void			ei_frame_configure		(ei_widget_t*		widget,$/;"	f
ei_geometry_param_t	ei_geometrymanager.h	/^typedef struct ei_geometry_param_t {$/;"	s
ei_geometry_param_t	ei_geometrymanager.h	/^} ei_geometry_param_t;$/;"	t	typeref:struct:ei_geometry_param_t
ei_geometrymanager_name_t	ei_geometrymanager.h	/^typedef char	ei_geometrymanager_name_t[20];$/;"	t
ei_geometrymanager_releasefunc_t	ei_geometrymanager.h	/^typedef void	(*ei_geometrymanager_releasefunc_t)	(struct ei_widget_t*	widget);$/;"	t
ei_geometrymanager_runfunc_t	ei_geometrymanager.h	/^typedef void	(*ei_geometrymanager_runfunc_t)		(struct ei_widget_t*	widget);$/;"	t
ei_geometrymanager_t	ei_geometrymanager.h	/^typedef struct ei_geometrymanager_t {$/;"	s
ei_geometrymanager_t	ei_geometrymanager.h	/^} ei_geometrymanager_t;$/;"	t	typeref:struct:ei_geometrymanager_t
ei_has_modifier	ei_event.c	/^inline ei_bool_t	ei_has_modifier	(ei_modifier_mask_t	mask,$/;"	f	file:
ei_has_modifier	ei_event.h	/^inline ei_bool_t	ei_has_modifier	(ei_modifier_mask_t	mask,$/;"	f
ei_key_event_t	ei_event.c	/^} ei_key_event_t;$/;"	t	typeref:struct:__anon3	file:
ei_key_event_t	ei_event.h	/^} ei_key_event_t;$/;"	t	typeref:struct:__anon3
ei_linked_point_t	ei_types.h	/^typedef struct ei_linked_point_t {$/;"	s
ei_linked_point_t	ei_types.h	/^} ei_linked_point_t;$/;"	t	typeref:struct:ei_linked_point_t
ei_linked_rect_t	ei_types.h	/^typedef struct ei_linked_rect_t {$/;"	s
ei_linked_rect_t	ei_types.h	/^} ei_linked_rect_t;$/;"	t	typeref:struct:ei_linked_rect_t
ei_linked_tag_t	ei_event.c	/^typedef struct ei_linked_tag_t {$/;"	s	file:
ei_linked_tag_t	ei_event.c	/^} ei_linked_tag_t;$/;"	t	typeref:struct:ei_linked_tag_t	file:
ei_linked_tag_t	ei_event.h	/^typedef struct ei_linked_tag_t {$/;"	s
ei_linked_tag_t	ei_event.h	/^} ei_linked_tag_t;$/;"	t	typeref:struct:ei_linked_tag_t
ei_mod_alt_left	ei_event.c	/^        ei_mod_alt_left,		\/\/\/< The "alternate" key at the left of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_alt_left	ei_event.h	/^	ei_mod_alt_left,		\/\/\/< The "alternate" key at the left of the space bar.$/;"	e	enum:__anon2
ei_mod_alt_right	ei_event.c	/^        ei_mod_alt_right,		\/\/\/< The "alternate" key at the right of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_alt_right	ei_event.h	/^	ei_mod_alt_right,		\/\/\/< The "alternate" key at the right of the space bar.$/;"	e	enum:__anon2
ei_mod_ctrl_left	ei_event.c	/^        ei_mod_ctrl_left,		\/\/\/< The "control" key at the left of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_ctrl_left	ei_event.h	/^	ei_mod_ctrl_left,		\/\/\/< The "control" key at the left of the space bar.$/;"	e	enum:__anon2
ei_mod_ctrl_right	ei_event.c	/^        ei_mod_ctrl_right,		\/\/\/< The "control" key at the right of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_ctrl_right	ei_event.h	/^	ei_mod_ctrl_right,		\/\/\/< The "control" key at the right of the space bar.$/;"	e	enum:__anon2
ei_mod_meta_left	ei_event.c	/^        ei_mod_meta_left		\/\/\/< The "meta" (command) key at the left of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_meta_left	ei_event.h	/^	ei_mod_meta_left		\/\/\/< The "meta" (command) key at the left of the space bar.$/;"	e	enum:__anon2
ei_mod_meta_right	ei_event.c	/^        ei_mod_meta_right,		\/\/\/< The "meta" (command) key at the right of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_meta_right	ei_event.h	/^	ei_mod_meta_right,		\/\/\/< The "meta" (command) key at the right of the space bar.$/;"	e	enum:__anon2
ei_mod_shift_left	ei_event.c	/^        ei_mod_shift_left,		\/\/\/< The "shift" key at the left of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_shift_left	ei_event.h	/^	ei_mod_shift_left,		\/\/\/< The "shift" key at the left of the space bar.$/;"	e	enum:__anon2
ei_mod_shift_right	ei_event.c	/^        ei_mod_shift_right	= 0,	\/\/\/< The "shift" key at the right of the space bar.$/;"	e	enum:__anon2	file:
ei_mod_shift_right	ei_event.h	/^	ei_mod_shift_right	= 0,	\/\/\/< The "shift" key at the right of the space bar.$/;"	e	enum:__anon2
ei_modifier_key_t	ei_event.c	/^} ei_modifier_key_t;$/;"	t	typeref:enum:__anon2	file:
ei_modifier_key_t	ei_event.h	/^} ei_modifier_key_t;$/;"	t	typeref:enum:__anon2
ei_modifier_mask_t	ei_event.c	/^typedef uint32_t	ei_modifier_mask_t;$/;"	t	file:
ei_modifier_mask_t	ei_event.h	/^typedef uint32_t	ei_modifier_mask_t;$/;"	t
ei_mouse_event_t	ei_event.c	/^} ei_mouse_event_t;$/;"	t	typeref:struct:__anon4	file:
ei_mouse_event_t	ei_event.h	/^} ei_mouse_event_t;$/;"	t	typeref:struct:__anon4
ei_point	ei_utils.h	/^static inline ei_point_t ei_point(int x, int y)$/;"	f
ei_point_add	ei_utils.h	/^static inline ei_point_t ei_point_add(ei_point_t p1, ei_point_t p2)$/;"	f
ei_point_neg	ei_utils.h	/^static inline ei_point_t ei_point_neg(ei_point_t point)$/;"	f
ei_point_sub	ei_utils.h	/^static inline ei_point_t ei_point_sub(ei_point_t p1, ei_point_t p2)$/;"	f
ei_point_t	ei_types.h	/^} ei_point_t;$/;"	t	typeref:struct:__anon8
ei_point_zero	ei_utils.h	/^static inline ei_point_t ei_point_zero()$/;"	f
ei_rect	ei_utils.h	/^static inline ei_rect_t ei_rect(ei_point_t top_left, ei_size_t size)$/;"	f
ei_rect_t	ei_types.h	/^} ei_rect_t;$/;"	t	typeref:struct:__anon10
ei_rect_zero	ei_utils.h	/^static inline ei_rect_t ei_rect_zero()$/;"	f
ei_relief_none	ei_types.h	/^	ei_relief_none		= 0,	\/\/\/< No relief (i.e. flat).$/;"	e	enum:__anon13
ei_relief_raised	ei_types.h	/^	ei_relief_raised,		\/\/\/< Above the screen.$/;"	e	enum:__anon13
ei_relief_sunken	ei_types.h	/^	ei_relief_sunken		\/\/\/< Inside the screen.$/;"	e	enum:__anon13
ei_relief_t	ei_types.h	/^} ei_relief_t;$/;"	t	typeref:enum:__anon13
ei_size	ei_utils.h	/^static inline ei_size_t ei_size(int width, int height)$/;"	f
ei_size_add	ei_utils.h	/^static inline ei_size_t ei_size_add(ei_size_t s1, ei_size_t s2)$/;"	f
ei_size_sub	ei_utils.h	/^static inline ei_size_t ei_size_sub(ei_size_t s1, ei_size_t s2)$/;"	f
ei_size_t	ei_types.h	/^} ei_size_t;$/;"	t	typeref:struct:__anon9
ei_size_zero	ei_utils.h	/^static inline ei_size_t ei_size_zero()$/;"	f
ei_style_bold	ei_types.h	/^	ei_style_bold		= 1,$/;"	e	enum:__anon15
ei_style_italic	ei_types.h	/^	ei_style_italic		= 2,$/;"	e	enum:__anon15
ei_style_normal	ei_types.h	/^	ei_style_normal		= 0,$/;"	e	enum:__anon15
ei_style_strikethrough	ei_types.h	/^	ei_style_strikethrough	= 8$/;"	e	enum:__anon15
ei_style_underline	ei_types.h	/^	ei_style_underline	= 4,$/;"	e	enum:__anon15
ei_surface_t	hw_interface.h	/^typedef void* ei_surface_t;$/;"	t
ei_tag_t	ei_event.c	/^typedef char* ei_tag_t;$/;"	t	file:
ei_tag_t	ei_event.h	/^typedef char* ei_tag_t;$/;"	t
ei_toplevel_configure	ei_widget.c	/^void			ei_toplevel_configure		(ei_widget_t*		widget,$/;"	f
ei_unbind	ei_event.c	/^void		ei_unbind		(ei_eventtype_t		eventtype,$/;"	f
ei_widget_create	ei_widget.c	/^ei_widget_t*		ei_widget_create		(ei_widgetclass_name_t	class_name,$/;"	f
ei_widget_pick	ei_widget.c	/^ei_widget_t*		ei_widget_pick			(ei_point_t*		where){;}$/;"	f
ei_widget_t	ei_widget.h	/^typedef struct ei_widget_t {$/;"	s
ei_widget_t	ei_widget.h	/^} ei_widget_t;$/;"	t	typeref:struct:ei_widget_t
ei_widgetclass_allocfunc_t	ei_widgetclass.h	/^typedef void*	(*ei_widgetclass_allocfunc_t)		();$/;"	t
ei_widgetclass_drawfunc_t	ei_widgetclass.h	/^typedef void	(*ei_widgetclass_drawfunc_t)		(struct ei_widget_t*	widget,$/;"	t
ei_widgetclass_geomnotifyfunc_t	ei_widgetclass.h	/^typedef void	(*ei_widgetclass_geomnotifyfunc_t)	(struct ei_widget_t*	widget,$/;"	t
ei_widgetclass_name_t	ei_widgetclass.h	/^typedef char 		ei_widgetclass_name_t[20];$/;"	t
ei_widgetclass_releasefunc_t	ei_widgetclass.h	/^typedef void	(*ei_widgetclass_releasefunc_t)		(struct ei_widget_t*	widget);$/;"	t
ei_widgetclass_setdefaultsfunc_t	ei_widgetclass.h	/^typedef void	(*ei_widgetclass_setdefaultsfunc_t)	(struct ei_widget_t*	widget);$/;"	t
ei_widgetclass_stringname	ei_widgetclass.h	/^static inline char*	ei_widgetclass_stringname	(ei_widgetclass_name_t name)$/;"	f
ei_widgetclass_t	ei_widgetclass.h	/^typedef struct ei_widgetclass_t {$/;"	s
ei_widgetclass_t	ei_widgetclass.h	/^} ei_widgetclass_t;$/;"	t	typeref:struct:ei_widgetclass_t
geom_params	ei_widget.h	/^				geom_params;	\/\/\/< Pointer to the geometry management parameters for this widget. If NULL, the widget is not currently managed and thus, is not mapped on the screen.$/;"	m	struct:ei_widget_t	typeref:struct:ei_widget_t::ei_geometry_param_t
geomnotifyfunc	ei_widgetclass.h	/^	ei_widgetclass_geomnotifyfunc_t		geomnotifyfunc;		\/\/\/< The function that is called to notify an instance of widget of this class that its geometry has changed.$/;"	m	struct:ei_widgetclass_t
green	ei_types.h	/^	unsigned char			green;	\/\/\/< The green component of the color.$/;"	m	struct:__anon11
height	ei_types.h	/^	int height;$/;"	m	struct:__anon9
k_default_button_corner_radius	ei_widget.h	/^static const int	k_default_button_corner_radius	= 10;$/;"	v
key	ei_event.c	/^                ei_key_event_t		key;		\/\/\/< Event parameters for keyboard-related events (see \\ref ei_key_event_t).$/;"	m	union:ei_event_t::__anon6	file:
key	ei_event.h	/^		ei_key_event_t		key;		\/\/\/< Event parameters for keyboard-related events (see \\ref ei_key_event_t).$/;"	m	union:ei_event_t::__anon6
key_sym	ei_event.c	/^        SDLKey				key_sym;	\/\/\/< The keyboard key symbol (see \\ref SDL_keysym.h)$/;"	m	struct:__anon3	file:
key_sym	ei_event.h	/^	SDLKey				key_sym;	\/\/\/< The keyboard key symbol (see \\ref SDL_keysym.h)$/;"	m	struct:__anon3
manager	ei_geometrymanager.h	/^	ei_geometrymanager_t*			manager;	\/**< Points to the geometry manager's structure 	*\/$/;"	m	struct:ei_geometry_param_t
modifier_mask	ei_event.c	/^        ei_modifier_mask_t		modifier_mask;	\/\/\/< The state of the modifier keys at the time of the event.$/;"	m	struct:__anon3	file:
modifier_mask	ei_event.h	/^	ei_modifier_mask_t		modifier_mask;	\/\/\/< The state of the modifier keys at the time of the event.$/;"	m	struct:__anon3
mouse	ei_event.c	/^                ei_mouse_event_t	mouse;		\/\/\/< Event parameters for mouse-related	events (see \\ref ei_mouse_event_t).$/;"	m	union:ei_event_t::__anon6	file:
mouse	ei_event.h	/^		ei_mouse_event_t	mouse;		\/\/\/< Event parameters for mouse-related	events (see \\ref ei_mouse_event_t).$/;"	m	union:ei_event_t::__anon6
name	ei_geometrymanager.h	/^	ei_geometrymanager_name_t		name;$/;"	m	struct:ei_geometrymanager_t
name	ei_widgetclass.h	/^	ei_widgetclass_name_t			name;			\/\/\/< The string name of this class of widget.$/;"	m	struct:ei_widgetclass_t
next	ei_event.c	/^        struct ei_linked_tag_t*	next;$/;"	m	struct:ei_linked_tag_t	typeref:struct:ei_linked_tag_t::ei_linked_tag_t	file:
next	ei_event.h	/^	struct ei_linked_tag_t*	next;$/;"	m	struct:ei_linked_tag_t	typeref:struct:ei_linked_tag_t::ei_linked_tag_t
next	ei_geometrymanager.h	/^	struct ei_geometrymanager_t*		next;$/;"	m	struct:ei_geometrymanager_t	typeref:struct:ei_geometrymanager_t::ei_geometrymanager_t
next	ei_types.h	/^	struct ei_linked_point_t*	next;		\/\/\/< The pointer to the next element in the linked list.$/;"	m	struct:ei_linked_point_t	typeref:struct:ei_linked_point_t::ei_linked_point_t
next	ei_types.h	/^	struct ei_linked_rect_t*	next;		\/\/\/< The pointer to the next element in the linked list.$/;"	m	struct:ei_linked_rect_t	typeref:struct:ei_linked_rect_t::ei_linked_rect_t
next	ei_widgetclass.h	/^	struct ei_widgetclass_t*		next;			\/\/\/< A pointer to the next instance of ei_widget_class_t, allows widget class descriptions to be chained.$/;"	m	struct:ei_widgetclass_t	typeref:struct:ei_widgetclass_t::ei_widgetclass_t
next_sibling	ei_widget.h	/^	struct ei_widget_t*	next_sibling;	\/\/\/< Pointer to the next child of this widget's parent widget.$/;"	m	struct:ei_widget_t	typeref:struct:ei_widget_t::ei_widget_t
param	ei_event.c	/^        } param;$/;"	m	struct:ei_event_t	typeref:union:ei_event_t::__anon6	file:
param	ei_event.h	/^	} param;$/;"	m	struct:ei_event_t	typeref:union:ei_event_t::__anon6
parent	ei_widget.h	/^	struct ei_widget_t*	parent;		\/\/\/< Pointer to the parent of this widget.$/;"	m	struct:ei_widget_t	typeref:struct:ei_widget_t::ei_widget_t
pick_color	ei_widget.h	/^	ei_color_t*		pick_color;	\/\/\/< pick_id encoded as a color.$/;"	m	struct:ei_widget_t
pick_id	ei_widget.h	/^	uint32_t		pick_id;	\/\/\/< Id of this widget in the picking offscreen.$/;"	m	struct:ei_widget_t
point	ei_types.h	/^	ei_point_t			point;		\/\/\/< The point.$/;"	m	struct:ei_linked_point_t
rect	ei_types.h	/^	ei_rect_t			rect;		\/\/\/< The rectangle.$/;"	m	struct:ei_linked_rect_t
red	ei_types.h	/^	unsigned char			red;	\/\/\/< The red component of the color.$/;"	m	struct:__anon11
releasefunc	ei_geometrymanager.h	/^	ei_geometrymanager_releasefunc_t	releasefunc;$/;"	m	struct:ei_geometrymanager_t
releasefunc	ei_widgetclass.h	/^	ei_widgetclass_releasefunc_t		releasefunc;		\/\/\/< The function that releases all the resources used by an instance of this class of widget.$/;"	m	struct:ei_widgetclass_t
requested_size	ei_widget.h	/^	ei_size_t		requested_size;	\/\/\/< Size requested by the widget (big enough for its label, for example), or by the programmer. This can be different than its screen size defined by the placer.$/;"	m	struct:ei_widget_t
runfunc	ei_geometrymanager.h	/^	ei_geometrymanager_runfunc_t		runfunc;$/;"	m	struct:ei_geometrymanager_t
screen_location	ei_widget.h	/^	ei_rect_t		screen_location;\/\/\/< Position and size of the widget expressed in the root window reference.$/;"	m	struct:ei_widget_t
setdefaultsfunc	ei_widgetclass.h	/^	ei_widgetclass_setdefaultsfunc_t	setdefaultsfunc;	\/\/\/< The function that sets the default values to all the parameters of an instance of this class of widget.$/;"	m	struct:ei_widgetclass_t
size	ei_types.h	/^	ei_size_t			size;		\/\/\/< Size of the rectangle.$/;"	m	struct:__anon10
tag	ei_event.c	/^        ei_tag_t		tag;$/;"	m	struct:ei_linked_tag_t	file:
tag	ei_event.h	/^	ei_tag_t		tag;$/;"	m	struct:ei_linked_tag_t
top_left	ei_types.h	/^	ei_point_t			top_left; 	\/\/\/< Coordinates of the top-left corner of the rectangle.$/;"	m	struct:__anon10
type	ei_event.c	/^        ei_eventtype_t	type;				\/\/\/< The type of the event.$/;"	m	struct:ei_event_t	file:
type	ei_event.h	/^	ei_eventtype_t	type;				\/\/\/< The type of the event.$/;"	m	struct:ei_event_t
user_param	ei_event.c	/^        void*				user_param;$/;"	m	struct:__anon5	file:
user_param	ei_event.h	/^	void*				user_param;$/;"	m	struct:__anon5
wclass	ei_widget.h	/^	ei_widgetclass_t*	wclass;		\/\/\/< The class of widget of this widget. Avoid the field name "class" which is a keyword in C++.$/;"	m	struct:ei_widget_t
where	ei_event.c	/^        ei_point_t			where;		\/\/\/< Where the mouse pointer was at the time of the event.$/;"	m	struct:__anon4	file:
where	ei_event.h	/^	ei_point_t			where;		\/\/\/< Where the mouse pointer was at the time of the event.$/;"	m	struct:__anon4
width	ei_types.h	/^	int width;$/;"	m	struct:__anon9
x	ei_types.h	/^	int x; \/\/\/< The abscissa of the point. The origin is on the left side of the image.$/;"	m	struct:__anon8
y	ei_types.h	/^	int y; \/\/\/< The ordinate of the point, the origin is at the top of the image, ordinates increase towards the bottom.$/;"	m	struct:__anon8
